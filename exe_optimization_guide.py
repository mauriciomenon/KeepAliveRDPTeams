# =============================================================================
# üî• GERA√á√ÉO DE EXE OTIMIZADO - KeepAlive RDP Connection
# =============================================================================

import os
import shutil
import subprocess
import sys
from pathlib import Path


def detect_python_versions():
    """Detecta vers√µes do Python dispon√≠veis"""
    versions = []

    # Verificar Python padr√£o
    try:
        result = subprocess.run(
            [sys.executable, "--version"], capture_output=True, text=True
        )
        if result.returncode == 0:
            version = result.stdout.strip().replace("Python ", "")
            versions.append((sys.executable, version, "atual"))
    except:
        pass

    # Verificar outras vers√µes comuns
    common_paths = [
        r"C:\Python310\python.exe",
        r"C:\Python311\python.exe",
        r"C:\Python312\python.exe",
        r"C:\Python39\python.exe",
        "python",
        "python3",
        "python3.10",
        "python3.11",
        "python3.12",
    ]

    for path in common_paths:
        try:
            result = subprocess.run([path, "--version"], capture_output=True, text=True)
            if result.returncode == 0:
                version = result.stdout.strip().replace("Python ", "")
                if (path, version, "") not in [(v[0], v[1], "") for v in versions]:
                    versions.append((path, version, ""))
        except:
            continue

    return versions


def select_python_version():
    """Permite selecionar vers√£o do Python"""
    versions = detect_python_versions()

    if not versions:
        print("‚ùå Nenhuma vers√£o do Python encontrada!")
        return None

    print("\nüêç Vers√µes do Python encontradas:")
    for i, (path, version, note) in enumerate(versions):
        note_str = f" ({note})" if note else ""
        print(f"{i+1}. Python {version}{note_str} - {path}")

    while True:
        try:
            choice = int(input(f"\nEscolha a vers√£o (1-{len(versions)}): ")) - 1
            if 0 <= choice < len(versions):
                selected = versions[choice]
                print(f"‚úÖ Selecionado: Python {selected[1]} - {selected[0]}")
                return selected[0]
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
        except ValueError:
            print("‚ùå Digite um n√∫mero v√°lido!")


def install_dependencies(python_exe):
    """Instala depend√™ncias necess√°rias"""
    print("\nüì¶ Verificando e instalando depend√™ncias...")

    dependencies = [
        "pyinstaller>=6.0.0",
        "PyQt6>=6.0.0",
        "pyautogui>=0.9.50",
        "pywin32>=300",
    ]

    for dep in dependencies:
        print(f"üì¶ Instalando {dep}...")
        try:
            result = subprocess.run(
                [python_exe, "-m", "pip", "install", dep],
                capture_output=True,
                text=True,
            )
            if result.returncode == 0:
                print(f"‚úÖ {dep} instalado com sucesso")
            else:
                print(f"‚ö†Ô∏è Aviso em {dep}: {result.stderr.strip()}")
        except Exception as e:
            print(f"‚ùå Erro instalando {dep}: {e}")

    print("‚úÖ Verifica√ß√£o de depend√™ncias conclu√≠da!")


def build_optimized_exe(python_exe=None):
    """Gera EXE otimizado com menor tamanho poss√≠vel"""

    if python_exe is None:
        python_exe = sys.executable

    print(f"üî• Iniciando build otimizado com Python: {python_exe}")

    # Nome do arquivo Python principal
    main_file = "keep-alive-app.py"

    # Verificar se arquivo existe
    if not os.path.exists(main_file):
        print(f"‚ùå Arquivo {main_file} n√£o encontrado!")
        print("üìÅ Arquivos .py encontrados:")
        for file in os.listdir("."):
            if file.endswith(".py"):
                print(f"   - {file}")
        return False

    # Comando PyInstaller ULTRA OTIMIZADO
    cmd = [
        python_exe,
        "-m",
        "PyInstaller",  # Usar Python selecionado
        "--onefile",  # Um √∫nico arquivo EXE
        "--windowed",  # Sem console (GUI)
        "--optimize=2",  # Otimiza√ß√£o m√°xima Python
        "--strip",  # Remove s√≠mbolos de debug
        "--noupx",  # Desabilita UPX (pode dar problemas)
        # üéØ EXCLUS√ïES AGRESSIVAS para reduzir tamanho
        "--exclude-module=tkinter",
        "--exclude-module=matplotlib",
        "--exclude-module=numpy",
        "--exclude-module=pandas",
        "--exclude-module=scipy",
        "--exclude-module=PIL",
        "--exclude-module=cv2",
        "--exclude-module=tensorflow",
        "--exclude-module=torch",
        "--exclude-module=django",
        "--exclude-module=flask",
        "--exclude-module=requests",
        "--exclude-module=urllib3",
        "--exclude-module=cryptography",
        "--exclude-module=sqlite3",
        "--exclude-module=xml",
        "--exclude-module=html",
        "--exclude-module=email",
        "--exclude-module=http",
        "--exclude-module=json",
        "--exclude-module=pickle",
        "--exclude-module=zipfile",
        "--exclude-module=tarfile",
        "--exclude-module=gzip",
        "--exclude-module=bz2",
        "--exclude-module=lzma",
        "--exclude-module=unittest",
        "--exclude-module=doctest",
        "--exclude-module=pdb",
        "--exclude-module=profile",
        "--exclude-module=pstats",
        "--exclude-module=timeit",
        "--exclude-module=trace",
        "--exclude-module=turtle",
        "--exclude-module=idlelib",
        "--exclude-module=lib2to3",
        # üö´ Exclus√µes espec√≠ficas PyQt6 desnecess√°rias
        "--exclude-module=PyQt6.QtWebEngine",
        "--exclude-module=PyQt6.QtWebEngineWidgets",
        "--exclude-module=PyQt6.QtWebEngineCore",
        "--exclude-module=PyQt6.QtMultimedia",
        "--exclude-module=PyQt6.QtMultimediaWidgets",
        "--exclude-module=PyQt6.QtOpenGL",
        "--exclude-module=PyQt6.QtOpenGLWidgets",
        "--exclude-module=PyQt6.QtSql",
        "--exclude-module=PyQt6.QtTest",
        "--exclude-module=PyQt6.QtDesigner",
        "--exclude-module=PyQt6.QtHelp",
        "--exclude-module=PyQt6.QtNetwork",
        "--exclude-module=PyQt6.QtPrintSupport",
        "--exclude-module=PyQt6.QtQml",
        "--exclude-module=PyQt6.QtQuick",
        "--exclude-module=PyQt6.QtSvg",
        "--exclude-module=PyQt6.QtSvgWidgets",
        "--exclude-module=PyQt6.Qt3D",
        "--exclude-module=PyQt6.QtCharts",
        "--exclude-module=PyQt6.QtDataVisualization",
        # üìÇ Nome e localiza√ß√£o do EXE
        "--name=KeepAliveRDP",
        "--distpath=dist_optimized",  # Pasta de sa√≠da
        "--workpath=build_temp",  # Pasta tempor√°ria
        "--specpath=specs",  # Pasta dos specs
        # üéØ √çCONE (usa o mesmo da bandeja do sistema)
        "--icon=NONE",  # Vamos usar √≠cone interno do Windows
        main_file,
    ]

    try:
        print("‚ö° Executando PyInstaller...")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Build conclu√≠do com sucesso!")

        # Verificar tamanho do arquivo gerado
        exe_path = Path("dist_optimized/KeepAliveRDP.exe")
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"üì¶ Tamanho do EXE: {size_mb:.1f} MB")
            print(f"üìÅ Localiza√ß√£o: {exe_path.absolute()}")

        return True

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro no build: {e}")
        print("üìã Output do erro:")
        print(e.stdout)
        print(e.stderr)
        return False


# =============================================================================
# üéØ **5. VERS√ÉO ALTERNATIVA - COM √çCONE EXTRA√çDO**
# =============================================================================


def extract_system_icon():
    """Extrai √≠cone de computador do Windows para usar no EXE"""
    try:
        import win32api
        import win32con
        import win32gui

        # Obter handle do √≠cone padr√£o de computador
        icon_handle = win32gui.LoadIcon(0, win32con.IDI_APPLICATION)

        # Salvar como arquivo .ico (necess√°rio para PyInstaller)
        # M√©todo simples: usar shell32.dll
        shell32_path = os.path.join(os.environ["WINDIR"], "System32", "shell32.dll")

        # Extrair √≠cone √≠ndice 15 (computador) da shell32.dll
        cmd_extract = [
            "powershell",
            "-Command",
            f"""
            [System.Reflection.Assembly]::LoadWithPartialName('System.Drawing') | Out-Null
            $icon = [System.Drawing.Icon]::ExtractAssociatedIcon('{shell32_path}')
            $stream = [System.IO.File]::Create('computer_icon.ico')
            $icon.Save($stream)
            $stream.Close()
            """,
        ]

        subprocess.run(cmd_extract, check=True)
        print("‚úÖ √çcone extra√≠do: computer_icon.ico")
        return "computer_icon.ico"

    except Exception as e:
        print(f"‚ö†Ô∏è Erro extraindo √≠cone: {e}")
        return None


# =============================================================================
# üéØ **6. BUILD COM √çCONE PERSONALIZADO**
# =============================================================================


def build_with_custom_icon(python_exe=None):
    """Build com √≠cone extra√≠do do sistema"""

    if python_exe is None:
        python_exe = sys.executable

    print("üé® Extraindo √≠cone do sistema...")
    icon_file = extract_system_icon()

    # Comando com √≠cone personalizado
    cmd = [
        python_exe,
        "-m",
        "PyInstaller",
        "--onefile",
        "--windowed",
        "--optimize=2",
        "--strip",
        # Todas as exclus√µes da vers√£o anterior...
        "--exclude-module=tkinter",
        "--exclude-module=matplotlib",
        # ... (todas as outras exclus√µes)
        "--name=KeepAliveRDP",
        "--distpath=dist_with_icon",
    ]

    # Adicionar √≠cone se foi extra√≠do com sucesso
    if icon_file and os.path.exists(icon_file):
        cmd.append(f"--icon={icon_file}")
        print(f"üé® Usando √≠cone: {icon_file}")

    cmd.append("keep-alive-app.py")

    try:
        subprocess.run(cmd, check=True)
        print("‚úÖ Build com √≠cone conclu√≠do!")

        exe_path = Path("dist_with_icon/KeepAliveRDP.exe")
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"üì¶ Tamanho: {size_mb:.1f} MB")

    except Exception as e:
        print(f"‚ùå Erro: {e}")


# =============================================================================
# üöÄ **7. EXECU√á√ÉO PRINCIPAL**
# =============================================================================

if __name__ == "__main__":
    print("üî• KeepAlive RDP - Gerador de EXE Otimizado")
    print("=" * 50)

    choice = input(
        """
Escolha o tipo de build:
1 - Build b√°sico otimizado (sem √≠cone personalizado)
2 - Build com √≠cone extra√≠do do sistema
3 - Ambos
Digite sua escolha (1-3): """
    ).strip()

    if choice == "1":
        build_optimized_exe()
    elif choice == "2":
        build_with_custom_icon()
    elif choice == "3":
        print("\nüî• Executando build b√°sico...")
        build_optimized_exe()
        print("\nüé® Executando build com √≠cone...")
        build_with_custom_icon()
    else:
        print("‚ùå Op√ß√£o inv√°lida!")

    print("\n‚úÖ Processo conclu√≠do!")

# =============================================================================
# üìã **8. COMANDOS MANUAIS ALTERNATIVOS**
# =============================================================================

"""
üîß **COMANDO MANUAL B√ÅSICO:**
pyinstaller --onefile --windowed --optimize=2 --strip --name=KeepAliveRDP keep-alive-app.py

üîß **COMANDO MANUAL SUPER OTIMIZADO:**
pyinstaller --onefile --windowed --optimize=2 --strip --exclude-module=tkinter --exclude-module=matplotlib --exclude-module=numpy --exclude-module=pandas --exclude-module=PyQt6.QtWebEngine --exclude-module=PyQt6.QtMultimedia --name=KeepAliveRDP keep-alive-app.py3

üéØ **TAMANHO ESPERADO:**
- Build b√°sico: ~25-35 MB
- Build otimizado: ~15-25 MB  
- Com UPX (opcional): ~8-15 MB

‚ö° **TEMPO DE CARREGAMENTO:**
- SSD: ~2-4 segundos
- HDD: ~3-6 segundos

üé® **√çCONE:**
- O programa usa QStyle.StandardPixmap.SP_ComputerIcon
- √â o mesmo √≠cone que aparece na bandeja
- √çcone padr√£o do Windows (computador)
"""

# üöÄ **EXECUTE:** python build_keepalive.py
