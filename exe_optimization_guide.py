# =============================================================================
# üî• GERA√á√ÉO DE EXE OTIMIZADO - KeepAlive RDP Connection
# Vers√£o Multi-M√°quina Compat√≠vel
# =============================================================================

import os
import platform
import shutil
import subprocess
import sys
from pathlib import Path


def detect_python_versions():
    """Detecta vers√µes do Python dispon√≠veis no sistema"""
    versions = []
    system = platform.system().lower()

    # Verificar Python atual
    try:
        result = subprocess.run(
            [sys.executable, "--version"], capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0:
            version = result.stdout.strip().replace("Python ", "")
            versions.append((sys.executable, version, "atual"))
    except:
        pass

    # Caminhos espec√≠ficos por sistema operacional
    if system == "windows":
        # Windows - verificar caminhos comuns
        base_paths = [
            r"C:\Python{}\python.exe",
            r"C:\Users\{}\AppData\Local\Programs\Python\Python{}\python.exe",
            r"C:\Program Files\Python{}\python.exe",
            r"C:\Program Files (x86)\Python{}\python.exe",
        ]

        # Vers√µes para testar
        python_versions = ["39", "310", "311", "312", "313"]

        for version in python_versions:
            for base_path in base_paths:
                if "{}" in base_path:
                    # Para caminhos com usu√°rio
                    if "Users" in base_path:
                        try:
                            username = os.getenv("USERNAME", "")
                            if username:
                                path = base_path.format(username, version)
                            else:
                                continue
                        except:
                            continue
                    else:
                        path = base_path.format(version)
                else:
                    path = base_path

                if os.path.exists(path):
                    try:
                        result = subprocess.run(
                            [path, "--version"],
                            capture_output=True,
                            text=True,
                            timeout=5,
                        )
                        if result.returncode == 0:
                            ver = result.stdout.strip().replace("Python ", "")
                            if not any(v[0] == path for v in versions):
                                versions.append((path, ver, ""))
                    except:
                        continue

    # Comandos gen√©ricos para qualquer sistema
    generic_commands = [
        "python",
        "python3",
        "py",
        "python.exe",
        "python3.9",
        "python3.10",
        "python3.11",
        "python3.12",
        "python3.13",
    ]

    for cmd in generic_commands:
        try:
            result = subprocess.run(
                [cmd, "--version"], capture_output=True, text=True, timeout=5
            )
            if result.returncode == 0:
                version = result.stdout.strip().replace("Python ", "")
                # Verificar se j√° n√£o foi adicionado
                if not any(v[1] == version and cmd in v[0] for v in versions):
                    # Obter caminho completo
                    try:
                        which_result = subprocess.run(
                            ["where" if system == "windows" else "which", cmd],
                            capture_output=True,
                            text=True,
                            timeout=5,
                        )
                        if which_result.returncode == 0:
                            full_path = which_result.stdout.strip().split("\n")[0]
                            versions.append((full_path, version, ""))
                    except:
                        versions.append((cmd, version, "comando"))
        except:
            continue

    return versions


def select_python_version():
    """Interface para sele√ß√£o da vers√£o do Python"""
    versions = detect_python_versions()

    if not versions:
        print("‚ùå Nenhuma vers√£o do Python encontrada!")
        print("üí° Certifique-se de que o Python est√° instalado e no PATH")
        return None

    print("\nüêç Vers√µes do Python encontradas:")
    print("-" * 60)

    for i, (path, version, note) in enumerate(versions):
        note_str = f" ({note})" if note else ""
        print(f"{i+1:2d}. Python {version}{note_str}")
        print(f"     üìÅ {path}")

    print("-" * 60)

    while True:
        try:
            choice = input(f"\nüéØ Escolha a vers√£o (1-{len(versions)}) [1]: ").strip()

            # Default para primeira op√ß√£o
            if not choice:
                choice = "1"

            choice_idx = int(choice) - 1

            if 0 <= choice_idx < len(versions):
                selected = versions[choice_idx]
                print(f"‚úÖ Selecionado: Python {selected[1]}")
                print(f"üìÅ Caminho: {selected[0]}")
                return selected[0]
            else:
                print(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero entre 1 e {len(versions)}")
        except ValueError:
            print("‚ùå Digite um n√∫mero v√°lido!")
        except KeyboardInterrupt:
            print("\nüî¥ Opera√ß√£o cancelada pelo usu√°rio")
            return None


def fix_pyinstaller_conflicts(python_exe):
    """Corrige conflitos conhecidos do PyInstaller"""
    print("\nüîß Verificando conflitos do PyInstaller...")

    # Lista de pacotes problem√°ticos b√°sicos
    problematic_packages = [
        "typing",  # Backport obsoleto
        "enum34",  # Enum backport obsoleto
        "pathlib2",  # Pathlib backport obsoleto
        "futures",  # Concurrent.futures backport obsoleto
        "importlib-metadata",  # Pode causar conflitos
    ]

    fixed_any = False

    for package in problematic_packages:
        try:
            # Verificar se est√° instalado
            check_cmd = [python_exe, "-c", f"import {package.replace('-', '_')}"]
            result = subprocess.run(
                check_cmd, capture_output=True, text=True, timeout=5
            )

            if result.returncode == 0:
                print(f"üóëÔ∏è Removendo pacote problem√°tico: {package}")
                uninstall_cmd = [python_exe, "-m", "pip", "uninstall", package, "-y"]
                result = subprocess.run(
                    uninstall_cmd, capture_output=True, text=True, timeout=30
                )

                if result.returncode == 0:
                    print(f"‚úÖ {package} removido com sucesso")
                    fixed_any = True
                else:
                    print(
                        f"‚ö†Ô∏è Falha ao remover {package}: {result.stderr.strip()[:50]}..."
                    )
        except:
            # Pacote n√£o instalado, tudo ok
            continue

    # üî• NOVO: Verificar conflito Qt (PyQt5 vs PyQt6)
    qt_conflict = check_qt_conflict(python_exe)
    if qt_conflict:
        fixed_any = True

    if fixed_any:
        print("üîÑ Conflitos corrigidos! PyInstaller deve funcionar agora.")
    else:
        print("‚úÖ Nenhum conflito encontrado.")


def check_qt_conflict(python_exe):
    """Verifica e resolve conflito entre PyQt5 e PyQt6"""
    print("\nüé® Verificando conflito Qt...")

    has_pyqt5 = False
    has_pyqt6 = False
    has_pyside6 = False

    # Verificar PyQt5
    try:
        result = subprocess.run(
            [python_exe, "-c", "import PyQt5; print('OK')"],
            capture_output=True,
            text=True,
            timeout=5,
        )
        if result.returncode == 0:
            has_pyqt5 = True
            print("üì¶ PyQt5 encontrado")
    except:
        pass

    # Verificar PyQt6
    try:
        result = subprocess.run(
            [python_exe, "-c", "import PyQt6; print('OK')"],
            capture_output=True,
            text=True,
            timeout=5,
        )
        if result.returncode == 0:
            has_pyqt6 = True
            print("üì¶ PyQt6 encontrado")
    except:
        pass

    # Verificar PySide6
    try:
        result = subprocess.run(
            [python_exe, "-c", "import PySide6; print('OK')"],
            capture_output=True,
            text=True,
            timeout=5,
        )
        if result.returncode == 0:
            has_pyside6 = True
            print("üì¶ PySide6 encontrado")
    except:
        pass

    # Se h√° conflito, resolver
    if (
        (has_pyqt5 and has_pyqt6)
        or (has_pyqt5 and has_pyside6)
        or (has_pyqt6 and has_pyside6)
    ):
        print("‚ö†Ô∏è CONFLITO: M√∫ltiplas bibliotecas Qt encontradas!")
        print("üéØ O PyInstaller n√£o suporta m√∫ltiplas bibliotecas Qt.")

        # Priorizar PyQt6 (mais moderno)
        if has_pyqt6:
            print("üîß Mantendo PyQt6 e removendo outras...")
            if has_pyqt5:
                remove_package(python_exe, "PyQt5")
            if has_pyside6:
                remove_package(python_exe, "PySide6")
        elif has_pyside6:
            print("üîß Mantendo PySide6 e removendo PyQt5...")
            if has_pyqt5:
                remove_package(python_exe, "PyQt5")
        else:
            print("üîß Mantendo PyQt5...")

        return True
    else:
        print("‚úÖ Nenhum conflito Qt encontrado")
        return False


def remove_package(python_exe, package):
    """Remove um pacote espec√≠fico"""
    try:
        print(f"üóëÔ∏è Removendo {package}...")
        cmd = [python_exe, "-m", "pip", "uninstall", package, "-y"]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)

        if result.returncode == 0:
            print(f"‚úÖ {package} removido com sucesso")
        else:
            print(f"‚ö†Ô∏è Falha ao remover {package}: {result.stderr.strip()[:100]}...")
    except Exception as e:
        print(f"‚ùå Erro removendo {package}: {e}")


def check_and_install_dependencies(python_exe):
    """Verifica e instala depend√™ncias necess√°rias"""
    print("\nüì¶ Verificando depend√™ncias...")

    # Primeiro, corrigir conflitos conhecidos
    fix_pyinstaller_conflicts(python_exe)

    dependencies = {
        "pyinstaller": ">=6.0.0",
        "PyQt6": ">=6.0.0",
        "pyautogui": ">=0.9.50",
    }

    # Adicionar pywin32 apenas no Windows
    if platform.system().lower() == "windows":
        dependencies["pywin32"] = ">=300"

    print(f"\nüîç Usando Python: {python_exe}")

    for package, version in dependencies.items():
        print(f"\nüì¶ Verificando {package}{version}...")

        # Verificar se j√° est√° instalado
        try:
            import_name = package.lower().replace("-", "_")
            if package == "PyQt6":
                import_name = "PyQt6.QtCore"

            check_cmd = [python_exe, "-c", f"import {import_name}; print('OK')"]
            result = subprocess.run(
                check_cmd, capture_output=True, text=True, timeout=10
            )

            if result.returncode == 0 and "OK" in result.stdout:
                print(f"‚úÖ {package} j√° instalado")
                continue
        except:
            pass

        # Instalar se necess√°rio
        print(f"üì• Instalando {package}{version}...")
        try:
            install_cmd = [python_exe, "-m", "pip", "install", f"{package}{version}"]
            result = subprocess.run(
                install_cmd, capture_output=True, text=True, timeout=120
            )

            if result.returncode == 0:
                print(f"‚úÖ {package} instalado com sucesso")
            else:
                print(f"‚ö†Ô∏è Aviso ao instalar {package}:")
                print(f"   {result.stderr.strip()[:100]}...")

        except subprocess.TimeoutExpired:
            print(f"‚è±Ô∏è Timeout ao instalar {package} - pode ter sido instalado")
        except Exception as e:
            print(f"‚ùå Erro instalando {package}: {str(e)[:100]}...")

    print("\n‚úÖ Verifica√ß√£o de depend√™ncias conclu√≠da!")


def find_main_file():
    """Encontra o arquivo principal do KeepAlive"""
    possible_names = [
        "keep-alive-app.py",
        "keepalive-app.py",
        "keepalive.py",
        "keep_alive.py",
        "main.py",
        "app.py",
    ]

    current_dir = Path(".")

    for name in possible_names:
        if (current_dir / name).exists():
            return name

    # Listar arquivos .py dispon√≠veis
    py_files = list(current_dir.glob("*.py"))
    if py_files:
        print("üìÅ Arquivos .py encontrados:")
        for i, file in enumerate(py_files):
            print(f"   {i+1}. {file.name}")

        while True:
            try:
                choice = input(
                    f"\nEscolha o arquivo principal (1-{len(py_files)}): "
                ).strip()
                if choice:
                    idx = int(choice) - 1
                    if 0 <= idx < len(py_files):
                        return py_files[idx].name
                print("‚ùå Op√ß√£o inv√°lida!")
            except (ValueError, KeyboardInterrupt):
                return None

    return None


def test_pyinstaller(python_exe):
    """Testa se PyInstaller est√° funcionando corretamente"""
    print("\nüß™ Testando PyInstaller...")

    try:
        test_cmd = [python_exe, "-m", "PyInstaller", "--version"]
        result = subprocess.run(test_cmd, capture_output=True, text=True, timeout=10)

        if result.returncode == 0:
            version = result.stdout.strip()
            print(f"‚úÖ PyInstaller funcional - Vers√£o: {version}")
            return True
        else:
            print(f"‚ùå PyInstaller com problemas: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Erro testando PyInstaller: {e}")
        return False


def build_optimized_exe(python_exe=None):
    """Gera EXE otimizado com configura√ß√µes agressivas de redu√ß√£o de tamanho"""

    if python_exe is None:
        python_exe = sys.executable

    print(f"\nüî• Iniciando build otimizado")
    print(f"üêç Python: {python_exe}")

    # Testar PyInstaller primeiro
    if not test_pyinstaller(python_exe):
        print("‚ùå PyInstaller n√£o est√° funcionando. Tentando corrigir...")
        fix_pyinstaller_conflicts(python_exe)

        # Testar novamente
        if not test_pyinstaller(python_exe):
            print("‚ùå N√£o foi poss√≠vel corrigir problemas do PyInstaller")
            return False

    # Encontrar arquivo principal
    main_file = find_main_file()
    if not main_file:
        print("‚ùå Arquivo principal n√£o encontrado!")
        return False

    print(f"üìÑ Arquivo principal: {main_file}")

    # Preparar diret√≥rios
    output_dir = Path("dist_keepalive")
    build_dir = Path("build_temp")
    spec_dir = Path("specs")

    # Limpar diret√≥rios antigos
    for dir_path in [output_dir, build_dir, spec_dir]:
        if dir_path.exists():
            try:
                shutil.rmtree(dir_path)
                print(f"üßπ Removido: {dir_path}")
            except:
                pass

    # Comando PyInstaller ULTRA OTIMIZADO com exclus√µes Qt espec√≠ficas
    cmd = [
        python_exe,
        "-m",
        "PyInstaller",
        "--onefile",  # Arquivo √∫nico
        "--windowed",  # Sem console
        "--optimize=2",  # Otimiza√ß√£o m√°xima
        "--strip",  # Remove s√≠mbolos debug
        "--noupx",  # Evita problemas com antiv√≠rus
        "--clean",  # Limpa cache
        # üö´ EXCLUS√ïES ESPEC√çFICAS PARA CONFLITO Qt
        "--exclude-module=PyQt5",  # For√ßa exclus√£o PyQt5
        "--exclude-module=PySide6",  # For√ßa exclus√£o PySide6
        "--exclude-module=qtpy",  # Exclui qtpy que causa detec√ß√£o m√∫ltipla
        # üéØ EXCLUS√ïES AGRESSIVAS - M√≥dulos desnecess√°rios
        "--exclude-module=tkinter",
        "--exclude-module=matplotlib",
        "--exclude-module=numpy",
        "--exclude-module=pandas",
        "--exclude-module=scipy",
        "--exclude-module=PIL",
        "--exclude-module=cv2",
        "--exclude-module=tensorflow",
        "--exclude-module=torch",
        "--exclude-module=django",
        "--exclude-module=flask",
        "--exclude-module=requests",
        "--exclude-module=urllib3",
        "--exclude-module=cryptography",
        "--exclude-module=sqlite3",
        "--exclude-module=xml",
        "--exclude-module=html",
        "--exclude-module=email",
        "--exclude-module=http",
        "--exclude-module=json",
        "--exclude-module=pickle",
        "--exclude-module=zipfile",
        "--exclude-module=tarfile",
        "--exclude-module=gzip",
        "--exclude-module=bz2",
        "--exclude-module=lzma",
        "--exclude-module=unittest",
        "--exclude-module=doctest",
        "--exclude-module=pdb",
        "--exclude-module=profile",
        "--exclude-module=pstats",
        "--exclude-module=timeit",
        "--exclude-module=trace",
        "--exclude-module=turtle",
        "--exclude-module=idlelib",
        "--exclude-module=lib2to3",
        # üö´ PyQt6 - M√≥dulos pesados desnecess√°rios
        "--exclude-module=PyQt6.QtWebEngine",
        "--exclude-module=PyQt6.QtWebEngineWidgets",
        "--exclude-module=PyQt6.QtWebEngineCore",
        "--exclude-module=PyQt6.QtMultimedia",
        "--exclude-module=PyQt6.QtMultimediaWidgets",
        "--exclude-module=PyQt6.QtOpenGL",
        "--exclude-module=PyQt6.QtOpenGLWidgets",
        "--exclude-module=PyQt6.QtSql",
        "--exclude-module=PyQt6.QtTest",
        "--exclude-module=PyQt6.QtDesigner",
        "--exclude-module=PyQt6.QtHelp",
        "--exclude-module=PyQt6.QtPrintSupport",
        "--exclude-module=PyQt6.QtQml",
        "--exclude-module=PyQt6.QtQuick",
        "--exclude-module=PyQt6.QtSvg",
        "--exclude-module=PyQt6.QtSvgWidgets",
        "--exclude-module=PyQt6.Qt3D",
        "--exclude-module=PyQt6.QtCharts",
        "--exclude-module=PyQt6.QtDataVisualization",
        # üìÇ Configura√ß√µes de sa√≠da
        f"--name=KeepAliveRDP",
        f"--distpath={output_dir}",
        f"--workpath={build_dir}",
        f"--specpath={spec_dir}",
        # üìÑ Arquivo principal
        main_file,
    ]

    # üî• Adicionar vari√°vel de ambiente para for√ßar PyQt6
    env = os.environ.copy()
    env["QT_API"] = "pyqt6"

    print("\n‚ö° Executando PyInstaller...")
    print("üéØ For√ßando uso exclusivo do PyQt6...")
    print("‚è±Ô∏è Isso pode levar alguns minutos...")

    try:
        # Executar com vari√°vel de ambiente espec√≠fica
        result = subprocess.run(
            cmd, capture_output=True, text=True, timeout=300, env=env
        )

        # Mostrar output relevante
        if result.stdout:
            lines = result.stdout.split("\n")
            for line in lines:
                if any(
                    keyword in line
                    for keyword in [
                        "INFO:",
                        "WARNING:",
                        "ERROR:",
                        "Building",
                        "Analyzing",
                    ]
                ):
                    print(f"  {line}")

        if result.stderr:
            print("üîç Erros/Avisos:")
            print(result.stderr)

        if result.returncode == 0:
            print("‚úÖ Build conclu√≠do com sucesso!")

            # Verificar arquivo gerado
            exe_path = output_dir / "KeepAliveRDP.exe"
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"\nüì¶ Arquivo gerado:")
                print(f"   üìÅ Local: {exe_path.absolute()}")
                print(f"   üìè Tamanho: {size_mb:.1f} MB")

                # Limpar arquivos tempor√°rios
                cleanup_build_files(build_dir, spec_dir)

                print(f"\nüéâ EXE pronto para uso!")
                return True
            else:
                print("‚ùå Arquivo EXE n√£o foi encontrado!")
                return False
        else:
            print(f"‚ùå Build falhou com c√≥digo: {result.returncode}")
            print("üìã Detalhes do erro:")
            if result.stderr:
                print(result.stderr)

            # Verificar se √© erro Qt espec√≠fico
            if "multiple Qt bindings" in result.stderr:
                print("\nüîß SOLU√á√ÉO: Conflito Qt detectado!")
                print("Execute novamente - o script vai corrigir automaticamente.")

            return False

    except subprocess.TimeoutExpired:
        print("‚è∞ Build interrompido por timeout (5 minutos)")
        return False
    except Exception as e:
        print(f"‚ùå Erro durante build: {e}")
        return False


def extract_system_icon():
    """Extrai √≠cone do sistema Windows para usar no EXE"""
    try:
        print("üé® Tentando extrair √≠cone do sistema...")

        # M√©todo 1: Usar PowerShell para extrair √≠cone
        powershell_cmd = [
            "powershell",
            "-Command",
            """
            Add-Type -AssemblyName System.Drawing
            $icon = [System.Drawing.SystemIcons]::Computer
            $bitmap = $icon.ToBitmap()
            $bitmap.Save('computer_icon.png', [System.Drawing.Imaging.ImageFormat]::Png)
            Write-Host 'Icon extracted successfully'
            """,
        ]

        result = subprocess.run(
            powershell_cmd, capture_output=True, text=True, timeout=30
        )

        if result.returncode == 0 and os.path.exists("computer_icon.png"):
            print("‚úÖ √çcone extra√≠do: computer_icon.png")
            return "computer_icon.png"

        # M√©todo 2: Criar √≠cone simples baseado em texto
        print("üé® Criando √≠cone simples...")
        create_simple_icon()
        if os.path.exists("simple_icon.ico"):
            return "simple_icon.ico"

    except Exception as e:
        print(f"‚ö†Ô∏è Erro extraindo √≠cone: {e}")

    return None


def create_simple_icon():
    """Cria um √≠cone simples usando PIL se dispon√≠vel"""
    try:
        from PIL import Image, ImageDraw, ImageFont

        # Criar imagem 32x32
        img = Image.new("RGBA", (32, 32), (0, 100, 200, 255))
        draw = ImageDraw.Draw(img)

        # Desenhar forma simples
        draw.rectangle([4, 4, 28, 28], fill=(255, 255, 255, 255))
        draw.rectangle([8, 8, 24, 24], fill=(0, 100, 200, 255))

        # Salvar como ICO
        img.save("simple_icon.ico", format="ICO")
        print("‚úÖ √çcone simples criado")

    except ImportError:
        print("‚ö†Ô∏è PIL n√£o dispon√≠vel para criar √≠cone")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro criando √≠cone: {e}")


def build_with_icon(python_exe):
    """Build com tentativa de √≠cone personalizado"""
    print("\nüé® Tentando build com √≠cone personalizado...")

    # Tentar extrair √≠cone
    icon_file = extract_system_icon()

    # Se n√£o conseguiu, fazer build sem √≠cone mesmo
    if not icon_file:
        print("üîÑ Fazendo build sem √≠cone personalizado...")
        return build_optimized_exe(python_exe)

    # Build com √≠cone
    print(f"üé® Usando √≠cone: {icon_file}")

    # Encontrar arquivo principal
    main_file = find_main_file()
    if not main_file:
        print("‚ùå Arquivo principal n√£o encontrado!")
        return False

    # Preparar diret√≥rios
    output_dir = Path("dist_with_icon")
    build_dir = Path("build_icon")
    spec_dir = Path("specs_icon")

    # Limpar diret√≥rios antigos
    for dir_path in [output_dir, build_dir, spec_dir]:
        if dir_path.exists():
            try:
                shutil.rmtree(dir_path)
            except:
                pass

    # Comando b√°sico com √≠cone
    cmd = [
        python_exe,
        "-m",
        "PyInstaller",
        "--onefile",
        "--windowed",
        "--optimize=2",
        "--strip",
        "--clean",
        f"--icon={icon_file}",
        f"--name=KeepAliveRDP_Icon",
        f"--distpath={output_dir}",
        f"--workpath={build_dir}",
        f"--specpath={spec_dir}",
        main_file,
    ]

    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)

        if result.returncode == 0:
            exe_path = output_dir / "KeepAliveRDP_Icon.exe"
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"‚úÖ Build com √≠cone conclu√≠do!")
                print(f"üìÅ Local: {exe_path.absolute()}")
                print(f"üìè Tamanho: {size_mb:.1f} MB")

                cleanup_build_files(build_dir, spec_dir)
                return True

        print("‚ùå Build com √≠cone falhou")
        if result.stderr:
            print(f"Erro: {result.stderr[:200]}...")

    except Exception as e:
        print(f"‚ùå Erro no build com √≠cone: {e}")

    return False


def show_system_info():
    """Mostra informa√ß√µes do sistema"""
    print("üíª Informa√ß√µes do Sistema:")
    print(f"   üñ•Ô∏è OS: {platform.system()} {platform.release()}")
    print(f"   üèóÔ∏è Arquitetura: {platform.machine()}")
    print(f"   üêç Python atual: {sys.version.split()[0]}")


def cleanup_build_files(build_dir, spec_dir):
    """Remove arquivos tempor√°rios de build"""
    try:
        if build_dir.exists():
            shutil.rmtree(build_dir)
            print("üßπ Arquivos tempor√°rios removidos")

        if spec_dir.exists():
            for spec_file in spec_dir.glob("*.spec"):
                spec_file.unlink()
            if not list(spec_dir.iterdir()):
                spec_dir.rmdir()
    except Exception as e:
        print(f"‚ö†Ô∏è Erro limpando arquivos tempor√°rios: {e}")


def show_build_options():
    """Mostra op√ß√µes de build dispon√≠veis"""
    print("\nüî• Op√ß√µes de Build Dispon√≠veis:")
    print("=" * 40)
    print("1 - Build b√°sico otimizado (recomendado)")
    print("2 - Build com √≠cone personalizado")
    print("3 - Ambos (b√°sico + com √≠cone)")
    print("4 - Build de teste r√°pido")
    print("=" * 40)


def build_quick_test(python_exe):
    """Build r√°pido para teste (sem otimiza√ß√µes pesadas)"""
    print("\n‚ö° Build de teste r√°pido...")

    main_file = find_main_file()
    if not main_file:
        print("‚ùå Arquivo principal n√£o encontrado!")
        return False

    # Build simples e r√°pido
    cmd = [
        python_exe,
        "-m",
        "PyInstaller",
        "--onefile",
        "--windowed",
        "--clean",
        "--name=KeepAliveRDP_Test",
        "--distpath=dist_test",
        main_file,
    ]

    try:
        print("‚ö° Executando build de teste...")
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=180)

        if result.returncode == 0:
            exe_path = Path("dist_test/KeepAliveRDP_Test.exe")
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"‚úÖ Build de teste conclu√≠do!")
                print(f"üìÅ Local: {exe_path.absolute()}")
                print(f"üìè Tamanho: {size_mb:.1f} MB")
                return True

        print("‚ùå Build de teste falhou")
        if result.stderr:
            print(f"Erro: {result.stderr[:200]}...")

    except Exception as e:
        print(f"‚ùå Erro no build de teste: {e}")

    return False


def main():
    """Fun√ß√£o principal com op√ß√µes de build"""
    print("üî• KeepAlive RDP - Gerador de EXE Otimizado")
    print("=" * 55)

    show_system_info()

    # Selecionar vers√£o do Python
    python_exe = select_python_version()
    if not python_exe:
        print("‚ùå N√£o foi poss√≠vel selecionar uma vers√£o do Python")
        return

    # Sempre verificar depend√™ncias e conflitos
    print("\nüîß Verificando ambiente Python...")
    check_and_install_dependencies(python_exe)

    # Mostrar op√ß√µes de build
    show_build_options()

    while True:
        try:
            choice = input("\nüéØ Escolha o tipo de build (1-4) [1]: ").strip()

            if not choice:
                choice = "1"

            if choice == "1":
                print("\nüî• Executando build b√°sico otimizado...")
                success = build_optimized_exe(python_exe)
                break

            elif choice == "2":
                print("\nüé® Executando build com √≠cone...")
                success = build_with_icon(python_exe)
                break

            elif choice == "3":
                print("\nüî• Executando build b√°sico...")
                success1 = build_optimized_exe(python_exe)

                print("\nüé® Executando build com √≠cone...")
                success2 = build_with_icon(python_exe)

                success = success1 or success2

                if success1 and success2:
                    print("\nüéâ Ambos builds conclu√≠dos com sucesso!")
                elif success1:
                    print("\n‚úÖ Build b√°sico conclu√≠do. Build com √≠cone falhou.")
                elif success2:
                    print("\n‚úÖ Build com √≠cone conclu√≠do. Build b√°sico falhou.")
                else:
                    print("\n‚ùå Ambos builds falharam.")
                break

            elif choice == "4":
                print("\n‚ö° Executando build de teste...")
                success = build_quick_test(python_exe)
                break

            else:
                print("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3 ou 4")
                continue

        except KeyboardInterrupt:
            print("\nüî¥ Opera√ß√£o cancelada pelo usu√°rio")
            return

    # Resultado final
    if success:
        print("\nüéâ Processo conclu√≠do com sucesso!")
        print("\nüìÇ Verifique as pastas de sa√≠da:")
        print("   - dist_keepalive/ (build b√°sico)")
        print("   - dist_with_icon/ (build com √≠cone)")
        print("   - dist_test/ (build de teste)")
    else:
        print("\n‚ùå Build falhou.")
        print("\nüí° Dicas para resolver problemas:")
        print("   1. Tente o build de teste (op√ß√£o 4) primeiro")
        print("   2. Execute novamente - o script corrigiu conflitos")
        print("   3. Verifique se o arquivo Python principal existe")
        print("   4. Use uma vers√£o mais recente do Python (3.9+)")

        # Oferecer tentar novamente
        retry = input("\nüîÑ Tentar build de teste? [S/n]: ").strip().lower()
        if retry in ("", "s", "sim", "y", "yes"):
            success = build_quick_test(python_exe)
            if success:
                print(
                    "\nüéâ Build de teste funcionou! Problema pode ser nas otimiza√ß√µes."
                )


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüî¥ Opera√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")

    input("\n‚è∏Ô∏è Pressione Enter para sair...")

# =============================================================================
# üìã COMANDOS MANUAIS PARA REFER√äNCIA
# =============================================================================

"""
üîß COMANDO MANUAL B√ÅSICO:
pyinstaller --onefile --windowed --optimize=2 --strip --name=KeepAliveRDP keep-alive-app.py

üîß COMANDO MANUAL COMPLETO:
pyinstaller --onefile --windowed --optimize=2 --strip \
  --exclude-module=tkinter --exclude-module=matplotlib \
  --exclude-module=PyQt6.QtWebEngine --exclude-module=PyQt6.QtMultimedia \
  --name=KeepAliveRDP keep-alive-app.py

üéØ TAMANHO ESPERADO:
- Build b√°sico: ~25-35 MB
- Build otimizado: ~15-25 MB
- Com todas exclus√µes: ~10-20 MB

‚ö° COMPATIBILIDADE:
- Windows 7/8/10/11
- N√£o requer instala√ß√£o do Python na m√°quina destino
- Execut√°vel independente (standalone)

üöÄ USO:
1. Coloque este arquivo na mesma pasta do seu script Python
2. Execute: python build_keepalive_exe.py
3. Siga as instru√ß√µes na tela
4. EXE ser√° gerado em dist_keepalive/KeepAliveRDP.exe
"""
